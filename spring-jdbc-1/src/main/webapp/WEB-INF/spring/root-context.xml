<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	
	<!-- 
		JDBC 기술
		DAO ~~ Connection[Statement] ~~ Driver ~~ DB
		
		Spring JDBC 기술
		DAO ~~ DataSource[예외전환서비스 : Connection[Statement]] ~~ Driver ~~ DB
		
		데이터베이스 마다 쿼리가 다르다. == Dialect <== ORM 기술로 극복
		데이터베이스 마다 예외정보가 다르다. == 예외 파편화 <== DataSource가 제공하는 예외전환서비스로 극복
	 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="url" value="${jdbc.url}" />
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<context:property-placeholder location="classpath:jdbc.properties"/>

	<context:component-scan base-package="com.example.demo"/>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 
		어드바이스 클래스를 만드는 대신 어드바이스 객체를 위한 설정을 한다. 
		트랜잭션 로직은 누가 짜도 똑같은 전형적인 로직이므로 
		로직은 알려줄 필요가 없다. 
		대신, DAO 메소드마다 어떻게 트랜잭션 속성을 적용할 것인지를 설정한다. -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 
				조회는 테이블의 칼럼의 상태를 변화시키지 않는다. 
				read-only="true" 설정으로 격리시간을 최소화 하는 것이 좋다. -->
			<tx:method name="find*" isolation="DEFAULT" propagation="REQUIRED" />
			<tx:method name="select*" read-only="false" timeout="-1" />
			<!-- 위에서 설정한 속성은 모두 기본값이다. -->
			
			<tx:method name="get*" read-only="true" />
			<tx:method name="search*" timeout="30" />
			
			<!-- 
				입력, 수정, 삭제는 테이블의 칼럼의 상태를 변화시킨다. 
				
				트랜잭션 범위안에서 RuntimeException(언체크드 예외)이 발생하면 롤백한다. 
				
				언체크드 예외는 try-catch 구문이 강제되지 않기 때문에
				개발자가 미처 예외를 처리하는 코드를 배치하지 못할 수도 있다.
				이를 감안해서 스프링은 언체크드 예외가 발생하면 개발자가 인지하지 못하는 상태이기
				때문에 롤백을 적용한다.
				
				트랜잭션 범위안에서 Exception(체크드 예외)이 발생하면 커밋한다. 
				체크드예외 ==> try-catch ==> 방어코드 ==> 개발자가 롤백여부를 결정
				==> 개발자의 판단을 존중해서 스프링은  커밋정책을 채택
				
				rollback-for="RuntimeException" 설정은 기본값이다. 
				rollback-for="Exception" 설정을 하게되면 
				Exception(체크드 예외)이 발생해도 롤백한다.
				
				DataSource가 디비가 발생시키는 모든 체크드예외를 언체크드예외로 전환 시키는
				예외전환 서비스를 제공한다. 따라서, Spring JDBC 기술을 사용하면
				체크드예외는 발생하지 않는다. 그러니, 어떤 예외가 발생하더라도 언체크드 예외이기
				때문에 롤백이 된다.
				
				그러나, 비즈니스 로직을 사용하다 보면 개발자의 코드가 추가되고 
				이 때 Spring JDBC 기술외에 기술을 사용하게 된다. 
				그러므로 체크드 예외가 발생할 수 있다.
			 -->
			<tx:method name="insert*" rollback-for="Exception" />
			<tx:method name="update*" rollback-for="RuntimeException" />
			<tx:method name="delete*" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<!-- 
			트랜잭션 어드바이스는 어라운드 어드바이스 이므로 
			aop:advisor 태그를 사용하여 설정한다. -->
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.example.demo.dao..*(..))" />
	</aop:config>
	
	<!-- 
		@Transactional 처리를 요구한다.
		@EnableTransactionManagement를 자바컨피그 클래스에 붙여도 된다.
		 -->
	<tx:annotation-driven proxy-target-class="true" 
		transaction-manager="transactionManager"/>

</beans>
